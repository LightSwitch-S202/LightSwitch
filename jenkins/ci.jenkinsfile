pipeline {
    agent any
    tools {
        nodejs "nodejs"
    }

    stages {
        stage ('[Git Clone]') {
            parallel {
                stage ('Clone') {
                    steps {
                        echo 'Clone start'
                        dir ('backend') {
                            sh 'pwd'
                            git branch: 'feature-infra/jenkins-integration', credentialsId: 'gitlab-token-bot', url: 'https://lab.ssafy.com/s10-final/S10P31S202'
                        }
                    }
                    post {
                        success {
                            echo 'Success Cloned Repository'
                        }
                        failure {
                            error "Fail Cloned Repository"
                        }
                    }
                }
            }
        }
        stage ('[Test]') {
            parallel {
                stage ('BE Test') {
                    steps {
                        echo 'BE - Test start'
                        dir ('backend/core-service'){
                            sh'''
                                chmod +x gradlew
                                ./gradlew test
                            '''
                        }
                    }
                    post{
                        success {
                            echo 'BE - Success Test'
                        }
                        failure {
                            error 'BE - Fail Test'
                        }
                    }
                }
                stage ('FE Test') {
                    steps {
                        echo 'FE - Test start'
                        dir ('frontend'){
                            sh'''
                                yarn cache clean
                                yarn install
                                yarn test
                            '''
                        }
                    }
                    post{
                        success {
                            echo 'BE - Success Test'
                        }
                        failure {
                            error 'BE - Fail Test'
                        }
                    }
                }
                stage ('SDK Test') {
                    steps {
                        echo 'JS SDK - Test start'
                        dir ('sdk/js/js-sdk'){
                            sh'''
                            '''
                        }
                    }
                    post{
                        success {
                            echo 'JS SDK - Success Test'
                        }
                        failure {
                            error 'JS SDK - Fail Test'
                        }
                    }
                }
            }
        }
         stage ('[SonarQube Reporting]') {
            parallel {
                stage ('BE Sonar') {
                    steps {
                        echo 'BE - Sonar start'
                        dir ('backend/core-service'){
                            sh'''
                                chmod +x gradlew
                                ./gradlew sonar
                            '''
                        }
                    }
                    post{
                        success {
                            echo 'BE - Success SonarQube Reporting'
                        }
                        failure {
                            error 'BE - Fail SonarQube Reporting'
                        }
                    }
                }
                stage ('FE Sonar') {
                    steps {
                        echo 'FE - SonarScanner start'
                        dir ('frontend'){
                            sh'''
                                 /opt/sonar-scanner/sonar-scanner-4.8.0.2856-linux/bin/sonar-scanner -Dproject.settings=./sonar-scanner.properties
                            '''
                        }
                    }
                    post{
                        success {
                            echo 'BE - Success SonarQube Reporting'
                        }
                        failure {
                            error 'BE - Fail SonarQube Reporting'
                        }
                    }
                }
                stage ('SDK Sonar') {
                    steps {
                        echo 'JS SDK - Sonar start'
                        dir ('sdk/js/js-sdk'){
                            sh'''
                            '''
                        }
                    }
                    post{
                        success {
                            echo 'JS SDK - Success Test'
                        }
                        failure {
                            error 'JS SDK - Fail Test'
                        }
                    }
                }
            }
        }
        // stage('[Download private file]') {
        //     steps {
        //         echo 'BE - Download private file start'
        //         sh 'pwd'
        //         withCredentials([file(credentialsId: 'application-private', variable: 'privateConfigFile')]) {
        //             sh 'cp -f ${privateConfigFile}  backend/backend/src/main/resources/application-private.yml'
        //         }
        //         withCredentials([file(credentialsId: 'batch-application-private', variable: 'batchPrivateConfigFile')]) {
        //             sh 'cp -f ${batchPrivateConfigFile}  backend/batch/src/main/resources/application-private.yml'
        //         }
        //     }
        // }
        stage ('[Build]') {
            parallel {
                stage ('BE Build') {
                    steps {
                        echo 'BE - Build backend start'
                        dir ('backend/core-service') {
                            sh'''
                                chmod +x gradlew
                                ./gradlew clean build
                            '''
                        }
                    }
                    post{
                        success {
                            echo 'BE - Success Build'
                        }
                        failure{
                            error 'BE - Fail Build'
                        }
                    }              
                }
                stage ('FE Build') {
                    steps {
                        echo 'FE - Build start'
                        dir ('frontend'){
                            sh'''
                                yarn build
                            '''
                        }
                    }
                    post{
                        success {
                            echo 'FE - Success Build'
                        }
                        failure{
                            error 'FE - Fail Build'
                        }
                    }    
                }
                 stage ('SDK Build') {
                    steps {
                        echo 'JS SDK - Build start'
                        dir ('sdk/js/js-sdk'){
                            sh'''
                            '''
                        }
                    }
                    post{
                        success {
                            echo 'JS SDK - Success Test'
                        }
                        failure {
                            error 'JS SDK - Fail Test'
                        }
                    }
            }

        }
    }
    post {
        success {
            script {
                def Author_Name = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                mattermostSend (color: 'good',
                message: "Succeeded: Job '${env.JOB_NAME}' [#${env.BUILD_NUMBER}] by ${Author_Name} (<${env.BUILD_URL}|Details>)",
                endpoint: 'https://meeting.ssafy.com/hooks/a7gaycppptyo7ksza6wbpistbc',
                channel: 'lunit-builds'
                )
            }
        }
        failure {
            script {
                def Author_Name = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                mattermostSend (color: 'danger',
                message: "Failed: Job '${env.JOB_NAME}' [#${env.BUILD_NUMBER}] by ${Author_Name} (<${env.BUILD_URL}|Details>)",
                endpoint: 'https://meeting.ssafy.com/hooks/a7gaycppptyo7ksza6wbpistbc',
                channel: 'lunit-builds'
                )
            }
        }
    }  
}
