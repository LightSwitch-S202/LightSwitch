pipeline { 
    agent any

    stages {

        stage ('[Build]') {
            parallel {
                stage ('BE Build') {
                    steps {
                        echo 'BE - Build backend start'
                        dir ('backend/core-service') {
                            sh'''
                                chmod +x gradlew
                                ./gradlew clean build
                            '''
                        }
                    }
                    post{
                        success {
                            echo 'BE - Success Build'
                        }
                        failure{
                            error 'BE - Fail Build'
                        }
                    }              
                }
            }
        }
        stage ('[Deploy]') {
            parallel {
                stage ('BE Container Build') {
                    steps {
                        echo 'BE - Container Build'
                        dir ('backend/core-service'){
                            sh'''
                                docker build -t ls-backend .
                            '''
                        }
                    }
                    post{
                        success {
                            echo 'BE - Success Container Build'
                        }
                        failure {
                            error 'BE - Fail Container Build'
                        }
                    }
                }

            }
        }
        stage ('Service Start') {
            steps {
                 script {
                    def status = sh(script: '''
                        EXIST_BLUE=$(docker-compose ps | grep "backend-blue" | grep Up || echo "NoActive")
                        echo "EXIST_BLUE: $EXIST_BLUE"
                    ''', returnStdout: true).trim()

                    def BEFORE_COLOR = status.contains("NoActive") ? "green" : "blue"
                    def AFTER_COLOR = status.contains("NoActive") ? "blue" : "green"
                    def BEFORE_PORT = status.contains("NoActive") ? 8001 : 8000
                    def AFTER_PORT = status.contains("NoActive") ? 8000 : 8001

                    sh "scp -i /ssh/private/.pem /var/jenkins_home/workspace/lightswitch-web-cd/prometheus.yml ubuntu@ip-172-26-5-31:/home/ubuntu/prometheus/prometheus.yml"
                    sh "export COMPOSE_PROFILES=$AFTER_COLOR && docker-compose up -d --build"

                    int retryCount = 0
                    while (retryCount++ < 5) {
                        echo "===== Checking server response (${retryCount}/10) ====="
                        def UP = sh(script: "curl -s http://lightswitch.kr:${AFTER_PORT}/api/actuator/health || echo 'NoActive'", returnStdout: true).trim()
                        if (UP == "NoActive") {
                            sleep(10)
                        } else {
                            break
                        }
                    }

                    if (retryCount == 5) {
                        error("Server startup failed")
                    }

                    sh """
                        docker exec nginx /bin/bash -c "cp /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak && sed 's/${BEFORE_COLOR}:${BEFORE_PORT}/${AFTER_COLOR}:${AFTER_PORT}/' /etc/nginx/conf.d/default.conf.bak > /etc/nginx/conf.d/default.conf && nginx -s reload"

                        echo "${BEFORE_COLOR} server down(port:${BEFORE_PORT})"
                        docker-compose stop backend-${BEFORE_COLOR}
                    """
                }
            }
            post{
                success {
                    echo 'Success Service Start'
                }
                failure {
                    error 'Fail Service Start'
                }
            }
        }
    }
    post {
        success {
            script {
                def Author_Name = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                mattermostSend (color: 'good',
                message: "Succeeded: Job '${env.JOB_NAME}' [#${env.BUILD_NUMBER}] by ${Author_Name} (<${env.BUILD_URL}|Details>)",
                endpoint: 'https://meeting.ssafy.com/hooks/a7gaycppptyo7ksza6wbpistbc',
                channel: 'lunit-builds'
                )
            }
        }
        failure {
            script {
                def Author_Name = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                mattermostSend (color: 'danger',
                message: "Failed: Job '${env.JOB_NAME}' [#${env.BUILD_NUMBER}] by ${Author_Name} (<${env.BUILD_URL}|Details>)",
                endpoint: 'https://meeting.ssafy.com/hooks/a7gaycppptyo7ksza6wbpistbc',
                channel: 'lunit-builds'
                )
            }
        }
    }  
}
